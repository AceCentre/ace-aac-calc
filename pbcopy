============================= test session starts ==============================
platform darwin -- Python 3.11.4, pytest-8.3.4, pluggy-1.5.0 -- /Users/willwade/GitHub/scicalccli/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/willwade/GitHub/scicalccli
configfile: pyproject.toml
testpaths: tests
plugins: cov-6.0.0
collecting ... collected 14 items

tests/test_calculator.py::test_basic_arithmetic PASSED                   [  7%]
tests/test_calculator.py::test_auto_complete_brackets PASSED             [ 14%]
tests/test_calculator.py::test_implicit_multiplication PASSED            [ 21%]
tests/test_calculator.py::test_memory_operations PASSED                  [ 28%]
tests/test_calculator.py::test_scientific_functions PASSED               [ 35%]
tests/test_calculator.py::test_advanced_scientific_functions FAILED      [ 42%]
tests/test_calculator.py::test_special_operations FAILED                 [ 50%]
tests/test_calculator.py::test_implicit_multiplication_advanced PASSED   [ 57%]
tests/test_calculator.py::test_error_handling PASSED                     [ 64%]
tests/test_calculator.py::test_complex_expressions PASSED                [ 71%]
tests/test_calculator.py::test_memory_chain PASSED                       [ 78%]
tests/test_calculator.py::test_percentage_variations FAILED              [ 85%]
tests/test_calculator.py::test_scientific_notation PASSED                [ 92%]
tests/test_calculator.py::test_mixed_functions PASSED                    [100%]

=================================== FAILURES ===================================
______________________ test_advanced_scientific_functions ______________________

self = <scicalc.calculator.Calculator object at 0x106f45a50>
expression = 'log2*(8)'

    def evaluate(self, expression: str) -> float:
        # Clean and prepare the expression
        expression = self._prepare_expression(expression)
    
        try:
            # Create a safe dictionary of allowed functions
            safe_dict = {
                # Basic trig functions (wrapping to handle degrees)
                'sin': lambda x: math.sin(math.radians(x)),
                'cos': lambda x: math.cos(math.radians(x)),
                'tan': lambda x: math.tan(math.radians(x)),
    
                # Inverse trig functions (converting result to degrees)
                'asin': lambda x: math.degrees(math.asin(x)),
                'acos': lambda x: math.degrees(math.acos(x)),
                'atan': lambda x: math.degrees(math.atan(x)),
    
                # Hyperbolic functions
                'sinh': math.sinh,
                'cosh': math.cosh,
                'tanh': math.tanh,
                'asinh': math.asinh,
                'acosh': math.acosh,
                'atanh': math.atanh,
    
                # Powers and roots
                'sqrt': math.sqrt,
                'cbrt': lambda x: np.cbrt(x),
                'pow': pow,
                'exp': math.exp,
    
                # Logarithms
                'log': math.log10,
                'ln': math.log,
                'log2': math.log2,
    
                # Constants
                'pi': math.pi,
                'e': math.e,
    
                # Additional functions
                'abs': abs,
                'factorial': math.factorial,
                'rand': np.random.random,
    
                # Common operations
                'rad': math.radians,
                'deg': math.degrees
            }
    
            # Handle special cases
            expression = self._handle_special_cases(expression)
    
            # Evaluate the expression
>           result = eval(expression, {"__builtins__": {}}, safe_dict)
E           TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'

src/scicalc/calculator.py:64: TypeError

During handling of the above exception, another exception occurred:

    def test_advanced_scientific_functions():
        calc = Calculator()
        # Inverse trig functions (results in degrees)
        assert calc.evaluate("sin⁻¹(0.5)") == pytest.approx(30.0, rel=1e-5)  # arcsin 0.5 = 30°
        assert calc.evaluate("cos⁻¹(0)") == pytest.approx(90.0, rel=1e-5)    # arccos 0 = 90°
    
        # Hyperbolic functions
        assert calc.evaluate("sinh(1)") == pytest.approx(1.1752, rel=1e-4)
        assert calc.evaluate("cosh(0)") == pytest.approx(1.0, rel=1e-4)
    
        # Powers and special numbers
        assert calc.evaluate("2²") == 4
        assert calc.evaluate("2³") == 8
        assert calc.evaluate("∛27") == 3
        assert calc.evaluate("√16") == 4
    
        # Logarithms
        assert calc.evaluate("log(100)") == 2
        assert calc.evaluate("ln(e)") == pytest.approx(1.0, rel=1e-4)
>       assert calc.evaluate("log₂(8)") == 3

tests/test_calculator.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <scicalc.calculator.Calculator object at 0x106f45a50>
expression = 'log2*(8)'

    def evaluate(self, expression: str) -> float:
        # Clean and prepare the expression
        expression = self._prepare_expression(expression)
    
        try:
            # Create a safe dictionary of allowed functions
            safe_dict = {
                # Basic trig functions (wrapping to handle degrees)
                'sin': lambda x: math.sin(math.radians(x)),
                'cos': lambda x: math.cos(math.radians(x)),
                'tan': lambda x: math.tan(math.radians(x)),
    
                # Inverse trig functions (converting result to degrees)
                'asin': lambda x: math.degrees(math.asin(x)),
                'acos': lambda x: math.degrees(math.acos(x)),
                'atan': lambda x: math.degrees(math.atan(x)),
    
                # Hyperbolic functions
                'sinh': math.sinh,
                'cosh': math.cosh,
                'tanh': math.tanh,
                'asinh': math.asinh,
                'acosh': math.acosh,
                'atanh': math.atanh,
    
                # Powers and roots
                'sqrt': math.sqrt,
                'cbrt': lambda x: np.cbrt(x),
                'pow': pow,
                'exp': math.exp,
    
                # Logarithms
                'log': math.log10,
                'ln': math.log,
                'log2': math.log2,
    
                # Constants
                'pi': math.pi,
                'e': math.e,
    
                # Additional functions
                'abs': abs,
                'factorial': math.factorial,
                'rand': np.random.random,
    
                # Common operations
                'rad': math.radians,
                'deg': math.degrees
            }
    
            # Handle special cases
            expression = self._handle_special_cases(expression)
    
            # Evaluate the expression
            result = eval(expression, {"__builtins__": {}}, safe_dict)
            self._last_result = result
            return result
        except Exception as e:
>           raise ValueError(f"Invalid expression: {str(e)}")
E           ValueError: Invalid expression: unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'

src/scicalc/calculator.py:68: ValueError
___________________________ test_special_operations ____________________________

    def test_special_operations():
        calc = Calculator()
        # Factorial
        assert calc.evaluate("5!") == 120
    
        # Percentage
        assert calc.evaluate("50%") == 0.5
>       assert calc.evaluate("200+10%") == 220
E       AssertionError: assert 200.1 == 220
E        +  where 200.1 = evaluate('200+10%')
E        +    where evaluate = <scicalc.calculator.Calculator object at 0x106fa9090>.evaluate

tests/test_calculator.py:70: AssertionError
__________________________ test_percentage_variations __________________________

    def test_percentage_variations():
        calc = Calculator()
        assert calc.evaluate("50%") == 0.5
>       assert calc.evaluate("200+10%") == 220
E       AssertionError: assert 200.1 == 220
E        +  where 200.1 = evaluate('200+10%')
E        +    where evaluate = <scicalc.calculator.Calculator object at 0x106f75c10>.evaluate

tests/test_calculator.py:114: AssertionError

---------- coverage: platform darwin, python 3.11.4-final-0 ----------
Name                        Stmts   Miss  Cover   Missing
---------------------------------------------------------
src/scicalc/calculator.py      67      6    91%   132-140
---------------------------------------------------------
TOTAL                          67      6    91%

=========================== short test summary info ============================
FAILED tests/test_calculator.py::test_advanced_scientific_functions - ValueEr...
FAILED tests/test_calculator.py::test_special_operations - AssertionError: as...
FAILED tests/test_calculator.py::test_percentage_variations - AssertionError:...
========================= 3 failed, 11 passed in 0.09s =========================
